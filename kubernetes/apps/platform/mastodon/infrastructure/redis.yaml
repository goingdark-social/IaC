# Redis master for Mastodon caching and Sidekiq
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  name: mastodon-redis-master
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon-redis-configuration
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon-redis-health
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon-redis-scripts
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
data:
  start-master.sh: |
    #!/bin/bash
    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-redis-headless
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-redis-master
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
    nodePort: null
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mastodon-redis-master
  namespace: mastodon
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: mastodon-redis
      app.kubernetes.io/name: redis
  serviceName: mastodon-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: mastodon-redis
        app.kubernetes.io/name: redis
        app.kubernetes.io/part-of: mastodon
    spec:
      serviceAccountName: mastodon-redis-master
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
      tolerations:
        - key: "autoscaler-node"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: "autoscaler-node"
                operator: NotIn
                values: ["true"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: master
                  app.kubernetes.io/instance: mastodon-redis
                  app.kubernetes.io/name: redis
              topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: docker.io/bitnami/redis:8.2.1-debian-12-r0
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/bash
        args:
        - -ec
        - /opt/bitnami/scripts/start-scripts/start-master.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 6
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - /bin/bash
            - -ec
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - /bin/bash
            - -ec
            - /health/ping_readiness_local.sh 1
        resources:
          requests:
            cpu: 150m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 128Mi
        volumeMounts:
        - name: start-scripts
          mountPath: /opt/bitnami/scripts/start-scripts
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: empty-dir
          mountPath: /opt/bitnami/redis/etc/
          subPath: app-conf-dir
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
      volumes:
      - name: start-scripts
        configMap:
          name: mastodon-redis-scripts
          defaultMode: 493
      - name: health
        configMap:
          name: mastodon-redis-health
          defaultMode: 493
      - name: config
        configMap:
          name: mastodon-redis-configuration
      - name: empty-dir
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: mastodon-redis
        app.kubernetes.io/name: redis
        app.kubernetes.io/part-of: mastodon
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
# Network policy for Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mastodon-redis-network-policy
  namespace: mastodon
  labels:
    app.kubernetes.io/instance: mastodon-redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: mastodon
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: mastodon-redis
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: mastodon
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - {}  # Allow all outbound