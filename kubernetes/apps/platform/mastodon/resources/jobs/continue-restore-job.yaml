apiVersion: batch/v1
kind: Job
metadata:
  name: continue-restore-job
  namespace: mastodon
  annotations:
    kustomize.config.k8s.io/description: |
      Continue the database restore to CNPG using existing backup file.
      Fixes the --verbose option issue and completes the migration.
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 1
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      restartPolicy: Never
      tolerations:
      - key: "autoscaler-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
        - name: restore
          image: postgres:17.2
          command: ["/bin/bash"]
          args:
            - -c
            - |
              set -euo pipefail

              echo "=== Continue Restore Job Started ==="
              echo "Timestamp: $(date)"
              echo "Target: $CNPG_HOST:$CNPG_PORT/$CNPG_DB_NAME"

              # Test CNPG connection
              echo "Testing CNPG connection..."
              PGPASSWORD="$CNPG_PASSWORD" PGSSLROOTCERT="$CNPG_SSLROOTCERT" pg_isready \
                -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER"

              # Check if we can find the backup file
              BACKUP_FILE="/migration/live_migration_20250929_220509.sql"
              if [ -f "$BACKUP_FILE" ]; then
                echo "✓ Found existing backup file: $BACKUP_FILE"
                ls -lh "$BACKUP_FILE"
              else
                echo "✗ Backup file not found at $BACKUP_FILE"
                echo "Available files in /migration:"
                ls -la /migration/ || echo "No migration directory found"
                exit 1
              fi

              echo "=== Starting restore to CNPG (without --verbose) ==="

              # Restore to CNPG without the problematic --verbose flag
              PGPASSWORD="$CNPG_PASSWORD" PGSSLROOTCERT="$CNPG_SSLROOTCERT" psql \
                --host="$CNPG_HOST" \
                --port="$CNPG_PORT" \
                --username="$CNPG_USER" \
                --dbname="$CNPG_DB_NAME" \
                --single-transaction \
                --file="$BACKUP_FILE"

              echo "✓ Restore to CNPG completed successfully"

              echo "=== Data Integrity Validation ==="

              # Compare row counts between source and target
              echo "Checking critical table row counts..."

              # Key Mastodon tables to verify
              TABLES=("accounts" "statuses" "users" "follows" "favourites" "mentions" "notifications" "media_attachments" "status_stats" "account_stats")

              for table in "${TABLES[@]}"; do
                # Check if table exists and get count
                if PGPASSWORD="$CNPG_PASSWORD" psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                   -c "\d $table" > /dev/null 2>&1; then

                  CNPG_COUNT=$(PGPASSWORD="$CNPG_PASSWORD" psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                              -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | tr -d ' \t\n\r')

                  echo "✓ $table: $CNPG_COUNT rows"
                else
                  echo "⚠️  Table $table not found, skipping..."
                fi
              done

              echo "=== Final Database Statistics ==="
              PGPASSWORD="$CNPG_PASSWORD" psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                SELECT
                  'Database Size' as metric,
                  pg_size_pretty(pg_database_size('$CNPG_DB_NAME')) as value
                UNION ALL
                SELECT
                  'Total Tables' as metric,
                  COUNT(*)::TEXT as value
                FROM information_schema.tables
                WHERE table_schema = 'public';
              "

              echo "=== Restore Continuation Completed Successfully ==="
              echo "CNPG database now contains the migrated data"
              echo "Applications can be switched to use CNPG"

          env:
            # CNPG connection details
            - name: CNPG_HOST
              value: "database-pooler-rw"
            - name: CNPG_PORT
              value: "5432"
            - name: CNPG_DB_NAME
              value: "app"
            - name: CNPG_USER
              valueFrom:
                secretKeyRef:
                  name: database-app
                  key: username
            - name: CNPG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-app
                  key: password

            # SSL configuration
            - name: PGSSLMODE
              value: "require"
            - name: CNPG_SSLROOTCERT
              value: "/opt/postgresql/cnpg-ca.crt"

          volumeMounts:
            - name: migration-storage
              mountPath: /migration
            - name: cnpg-ca
              mountPath: /opt/postgresql/cnpg-ca.crt
              subPath: ca.crt
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: migration-storage
          emptyDir:
            sizeLimit: 20Gi
        - name: cnpg-ca
          secret:
            secretName: database-ca
            items:
              - key: ca.crt
                path: ca.crt