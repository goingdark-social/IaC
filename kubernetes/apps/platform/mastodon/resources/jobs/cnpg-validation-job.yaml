apiVersion: batch/v1
kind: Job
metadata:
  name: cnpg-validation-job
  namespace: mastodon
  annotations:
    kustomize.config.k8s.io/description: |
      Post-migration validation job for CNPG PostgreSQL.
      Performs comprehensive testing of migrated data and performance validation.
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 1
  ttlSecondsAfterFinished: 86400  # Keep job for 24 hours for analysis
  template:
    spec:
      restartPolicy: Never
      tolerations:
      - key: "autoscaler-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
        - name: cnpg-validation
          image: postgres:17.2
          command: ["/bin/bash"]
          args:
            - -c
            - |
              set -euo pipefail

              echo "=== CNPG Post-Migration Validation Job Started ==="
              echo "Timestamp: $(date)"
              echo "Target CNPG RW: $CNPG_HOST:$CNPG_PORT/$CNPG_DB_NAME"
              echo "Target CNPG RO: $CNPG_RO_HOST:$CNPG_PORT/$CNPG_DB_NAME"

              # Test connectivity
              echo "=== Testing Database Connectivity ==="
              pg_isready -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME"
              pg_isready -h "$CNPG_RO_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME"

              echo "=== Database Schema Validation ==="

              # Check critical Mastodon tables exist
              EXPECTED_TABLES=("accounts" "statuses" "users" "follows" "favourites" "mentions" "notifications" "media_attachments" "tags" "statuses_tags")

              echo "Checking critical Mastodon tables..."
              for table in "${EXPECTED_TABLES[@]}"; do
                if psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                   -c "\d $table" > /dev/null 2>&1; then
                  echo "✓ Table $table exists"
                else
                  echo "✗ Table $table MISSING"
                  exit 1
                fi
              done

              # Check indexes
              echo "Checking critical indexes..."
              INDEX_COUNT=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                           -t -c "SELECT COUNT(*) FROM pg_indexes WHERE schemaname = 'public';")
              echo "Total indexes: $INDEX_COUNT"

              if [ "$INDEX_COUNT" -lt 50 ]; then
                echo "⚠️  Warning: Low index count, expected 50+ indexes for Mastodon"
              fi

              # Check foreign key constraints
              echo "Checking foreign key constraints..."
              FK_COUNT=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                        -t -c "SELECT COUNT(*) FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY';")
              echo "Foreign key constraints: $FK_COUNT"

              echo "=== Data Integrity Validation ==="

              # Count records in critical tables
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                SELECT
                  'accounts' as table_name,
                  COUNT(*) as row_count,
                  MIN(created_at) as oldest_record,
                  MAX(created_at) as newest_record
                FROM accounts
                UNION ALL
                SELECT
                  'statuses' as table_name,
                  COUNT(*) as row_count,
                  MIN(created_at) as oldest_record,
                  MAX(created_at) as newest_record
                FROM statuses
                UNION ALL
                SELECT
                  'users' as table_name,
                  COUNT(*) as row_count,
                  MIN(created_at) as oldest_record,
                  MAX(created_at) as newest_record
                FROM users
                ORDER BY table_name;
              "

              # Check for orphaned records (basic referential integrity)
              echo "Checking referential integrity..."

              # Check users without accounts
              ORPHANED_USERS=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                              -t -c "SELECT COUNT(*) FROM users WHERE account_id NOT IN (SELECT id FROM accounts);")
              echo "Orphaned users (without accounts): $ORPHANED_USERS"

              # Check statuses without accounts
              ORPHANED_STATUSES=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                                 -t -c "SELECT COUNT(*) FROM statuses WHERE account_id NOT IN (SELECT id FROM accounts);")
              echo "Orphaned statuses (without accounts): $ORPHANED_STATUSES"

              if [ "$ORPHANED_USERS" -gt 0 ] || [ "$ORPHANED_STATUSES" -gt 0 ]; then
                echo "⚠️  Warning: Found orphaned records, data integrity issues detected"
              else
                echo "✓ Referential integrity check passed"
              fi

              echo "=== Performance Validation ==="

              # Test query performance on key operations
              echo "Testing query performance..."

              # Simple SELECT performance test
              START_TIME=$(date +%s%N)
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                   -c "SELECT COUNT(*) FROM accounts;" > /dev/null
              END_TIME=$(date +%s%N)
              QUERY_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
              echo "Simple COUNT query time: ${QUERY_TIME}ms"

              # Complex JOIN performance test
              START_TIME=$(date +%s%N)
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                   -c "SELECT COUNT(*) FROM statuses s JOIN accounts a ON s.account_id = a.id LIMIT 1000;" > /dev/null
              END_TIME=$(date +%s%N)
              JOIN_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
              echo "Complex JOIN query time: ${JOIN_TIME}ms"

              if [ "$QUERY_TIME" -gt 5000 ] || [ "$JOIN_TIME" -gt 10000 ]; then
                echo "⚠️  Warning: Query performance may be degraded"
              else
                echo "✓ Query performance looks good"
              fi

              echo "=== Read-Only Endpoint Validation ==="

              # Test read-only endpoint
              echo "Testing read-only endpoint connectivity and functionality..."
              RO_RESULT=$(psql -h "$CNPG_RO_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                         -t -c "SELECT COUNT(*) FROM accounts;")
              RW_RESULT=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                         -t -c "SELECT COUNT(*) FROM accounts;")

              RO_RESULT=$(echo $RO_RESULT | tr -d ' ')
              RW_RESULT=$(echo $RW_RESULT | tr -d ' ')

              if [ "$RO_RESULT" = "$RW_RESULT" ]; then
                echo "✓ Read-only endpoint returns consistent data"
              else
                echo "✗ Read-only endpoint inconsistent: RO=$RO_RESULT, RW=$RW_RESULT"
                exit 1
              fi

              # Test that read-only endpoint rejects writes (should fail)
              echo "Testing read-only endpoint write protection..."
              if psql -h "$CNPG_RO_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                 -c "CREATE TEMP TABLE test_ro_protection (id INT);" 2>/dev/null; then
                echo "✗ Read-only endpoint allows writes (SECURITY ISSUE)"
                exit 1
              else
                echo "✓ Read-only endpoint properly rejects writes"
              fi

              echo "=== Extension Validation ==="

              # Check required PostgreSQL extensions
              echo "Checking PostgreSQL extensions..."
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                SELECT
                  name,
                  installed_version,
                  CASE
                    WHEN installed_version IS NOT NULL THEN '✓ Installed'
                    ELSE '✗ Missing'
                  END as status
                FROM pg_available_extensions
                WHERE name IN ('uuid-ossp', 'pg_stat_statements', 'btree_gin', 'btree_gist', 'plpgsql')
                ORDER BY name;
              "

              echo "=== Database Configuration Validation ==="

              # Check critical database settings
              echo "Checking database configuration..."
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                SELECT
                  name,
                  setting,
                  unit,
                  CASE
                    WHEN name = 'max_connections' AND setting::int >= 100 THEN '✓'
                    WHEN name = 'shared_buffers' AND setting::int >= 131072 THEN '✓'  -- 1GB in 8KB blocks
                    WHEN name = 'effective_cache_size' AND setting::int >= 131072 THEN '✓'
                    WHEN name = 'checkpoint_completion_target' AND setting::float >= 0.7 THEN '✓'
                    ELSE '⚠️'
                  END as status
                FROM pg_settings
                WHERE name IN ('max_connections', 'shared_buffers', 'effective_cache_size', 'checkpoint_completion_target')
                ORDER BY name;
              "

              echo "=== Backup System Validation ==="

              # Check if backup system is working
              echo "Checking CNPG backup configuration..."
              if command -v kubectl > /dev/null; then
                kubectl get postgresql -n mastodon
                kubectl get objectstore -n mastodon
                kubectl get scheduledbackup -n mastodon
              else
                echo "kubectl not available, skipping Kubernetes resource checks"
              fi

              echo "=== SSL Certificate Validation ==="

              # Verify SSL configuration
              SSL_STATUS=$(psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" \
                          -t -c "SELECT ssl FROM pg_stat_ssl WHERE pid = pg_backend_pid();")

              if [ "$SSL_STATUS" = " t" ]; then
                echo "✓ SSL connection established successfully"

                # Get SSL details
                psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                  SELECT
                    'SSL Version' as setting,
                    version as value
                  FROM pg_stat_ssl
                  WHERE pid = pg_backend_pid()
                  UNION ALL
                  SELECT
                    'SSL Cipher' as setting,
                    cipher as value
                  FROM pg_stat_ssl
                  WHERE pid = pg_backend_pid();
                "
              else
                echo "✗ SSL connection failed"
                exit 1
              fi

              echo "=== Final Database Statistics ==="

              # Final database overview
              psql -h "$CNPG_HOST" -p "$CNPG_PORT" -U "$CNPG_USER" -d "$CNPG_DB_NAME" -c "
                SELECT
                  'Database' as metric,
                  datname as value
                FROM pg_database
                WHERE datname = '$CNPG_DB_NAME'
                UNION ALL
                SELECT
                  'Size' as metric,
                  pg_size_pretty(pg_database_size('$CNPG_DB_NAME')) as value
                UNION ALL
                SELECT
                  'Tables' as metric,
                  COUNT(*)::TEXT as value
                FROM information_schema.tables
                WHERE table_schema = 'public'
                UNION ALL
                SELECT
                  'Indexes' as metric,
                  COUNT(*)::TEXT as value
                FROM pg_indexes
                WHERE schemaname = 'public'
                UNION ALL
                SELECT
                  'Active Connections' as metric,
                  COUNT(*)::TEXT as value
                FROM pg_stat_activity
                WHERE state = 'active';
              "

              echo "=== Validation Summary ==="
              echo "✓ Database connectivity verified"
              echo "✓ Schema integrity validated"
              echo "✓ Data consistency checked"
              echo "✓ Performance benchmarked"
              echo "✓ Read-only endpoint tested"
              echo "✓ SSL configuration verified"
              echo "✓ Extensions validated"

              echo "=== CNPG Post-Migration Validation Completed Successfully ==="
              echo "CNPG database is ready for production use"
              echo ""
              echo "Recommended next steps:"
              echo "1. Update Mastodon configuration to use CNPG endpoints"
              echo "2. Monitor application startup and error logs"
              echo "3. Run additional application-specific tests"
              echo "4. Schedule Zalando cleanup after successful validation period"

          env:
            # CNPG connection details
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mastodon-db-url
                  key: DB_PASS
            - name: CNPG_HOST
              value: "database-pooler-rw"
            - name: CNPG_RO_HOST
              value: "database-pooler-ro"
            - name: CNPG_PORT
              value: "5432"
            - name: CNPG_DB_NAME
              value: "mastodon"
            - name: CNPG_USER
              valueFrom:
                secretKeyRef:
                  name: mastodon-db-url
                  key: DB_USER
            - name: PGSSLMODE
              value: "require"
            - name: PGSSLROOTCERT
              value: "/opt/postgresql/root.crt"
          volumeMounts:
            - name: db-ca
              mountPath: /opt/postgresql/root.crt
              subPath: ca.crt
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              memory: 1Gi
      volumes:
        - name: db-ca
          secret:
            secretName: database-ca
            items:
              - key: ca.crt
                path: ca.crt